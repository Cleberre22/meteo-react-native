{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar days = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];\nvar months = ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nvar WeatherItem = function WeatherItem(_ref) {\n  var title = _ref.title,\n      value = _ref.value,\n      unit = _ref.unit;\n  return _jsxs(View, {\n    style: styles.weatherItem,\n    children: [_jsx(Text, {\n      style: styles.weatherItemTitle,\n      children: title\n    }), _jsxs(Text, {\n      style: styles.weatherItemValue,\n      children: [value, unit]\n    })]\n  });\n};\n\nvar DateTime = function DateTime() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      time = _useState4[0],\n      setTime = _useState4[1];\n\n  useEffect(function () {\n    setInterval(function () {\n      var time = new Date();\n      var month = time.getMonth();\n      var date = time.getDate();\n      var day = time.getDay();\n      var hour = time.getHours();\n      var minutes = time.getMinutes();\n      setTime(hour + ':' + (minutes < 10 ? '0' + minutes : minutes));\n      setTime(hours[hour] + ':' + date + ' ' + months[month]);\n      setDate(days[day] + ', ' + date + ' ' + months[month]);\n    }, 1000);\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      children: [_jsx(View, {\n        children: _jsx(Text, {\n          style: styles.heading,\n          children: time\n        })\n      }), _jsx(View, {\n        children: _jsx(Text, {\n          style: styles.subHeading,\n          children: date\n        })\n      }), _jsxs(View, {\n        style: styles.weatherItemContainer,\n        children: [_jsx(WeatherItem, {\n          title: \"Humidit\\xE9\",\n          value: \"79\",\n          unit: \"%\"\n        }), _jsx(WeatherItem, {\n          title: \"Pression\",\n          value: \"1000\",\n          unit: \"hp\"\n        }), _jsx(WeatherItem, {\n          title: \"Sunrise\",\n          value: \"06:34\"\n        }), _jsx(WeatherItem, {\n          title: \"Sunset\",\n          value: \"20:43\"\n        })]\n      })]\n    }), _jsxs(View, {\n      style: styles.rightAlign,\n      children: [_jsx(Text, {\n        style: styles.timeZone,\n        children: \"France, Saint-Nazaire\"\n      }), _jsx(Text, {\n        style: styles.latLong,\n        children: \"4.22N 50E\"\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1.5,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    padding: 15\n  },\n  heading: {\n    fontSize: 45,\n    color: 'white',\n    marginTop: 25,\n    fontWeight: '100'\n  },\n  subHeading: {\n    fontSize: 25,\n    color: '#eee',\n    fontWeight: '300'\n  },\n  rightAlign: {\n    textAlign: 'right',\n    marginTop: 35\n  },\n  timeZone: {\n    fontSize: 15,\n    color: 'white'\n  },\n  latLong: {\n    fontSize: 16,\n    color: 'white',\n    fontWeight: '700'\n  },\n  weatherItemContainer: {\n    backgroundColor: \"#18181b99\",\n    borderRadius: 10,\n    borderColor: \"#eee\",\n    borderWidth: 1,\n    padding: 10,\n    marginTop: 10\n  },\n  weatherItem: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  weatherItemTitle: {\n    color: 'white',\n    fontSize: 14,\n    fontWeight: '100'\n  },\n  weatherItemValue: {\n    color: 'white',\n    fontSize: 14,\n    fontWeight: '100'\n  }\n});\nexport default DateTime;","map":{"version":3,"names":["React","useEffect","useState","days","months","WeatherItem","title","value","unit","styles","weatherItem","weatherItemTitle","weatherItemValue","DateTime","date","setDate","time","setTime","setInterval","Date","month","getMonth","getDate","day","getDay","hour","getHours","minutes","getMinutes","hours","container","heading","subHeading","weatherItemContainer","rightAlign","timeZone","latLong","StyleSheet","create","flex","flexDirection","justifyContent","padding","fontSize","color","marginTop","fontWeight","textAlign","backgroundColor","borderRadius","borderColor","borderWidth"],"sources":["C:/wamp64/www/meteo-react-native/components/DateTime.jsx"],"sourcesContent":["import React, {useEffect, useState } from \"react\";\r\nimport { StyleSheet, View, Text } from \"react-native\";\r\n\r\nconst days = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']\r\nconst months = ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\nconst WeatherItem = ({title, value, unit}) => {\r\n    return(\r\n        <View style={styles.weatherItem}>\r\n            <Text style={styles.weatherItemTitle}>{title}</Text>\r\n            <Text style={styles.weatherItemValue}>{value}{unit}</Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst DateTime = () => {\r\n\r\n    const [date, setDate] = useState('')\r\n    const [time, setTime] = useState('')\r\n\r\n    useEffect (() => {\r\n        setInterval(() => {\r\n            const time = new Date();\r\n            const month = time.getMonth();\r\n            const date = time.getDate();\r\n            const day = time.getDay();\r\n            const hour = time.getHours();\r\n            // const hoursIn12HrFormat = hour >= 13 ? hour %12: hour\r\n            const minutes = time.getMinutes();\r\n            // const ampm = hour >=12 ? 'pm' : 'am'\r\n        \r\n            // setTime((hoursIn12HrFormat < 10? '0'+hoursIn12HrFormat : hoursIn12HrFormat) + ':' + (minutes < 10? '0'+minutes: minutes) +ampm) \r\n            setTime((hour) + ':' + (minutes < 10? '0'+minutes: minutes)) \r\n            setTime(hours[hour] + ':' + date+ ' ' + months[month]) \r\n            setDate(days[day] + ', ' + date+ ' ' + months[month]) \r\n        \r\n        }, 1000);\r\n    }, [])\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View>\r\n        <View>\r\n          <Text style={styles.heading}>{time}</Text>\r\n        </View>\r\n        <View>\r\n          <Text style={styles.subHeading}>{date}</Text>\r\n        </View>\r\n        <View style={styles.weatherItemContainer}>\r\n            <WeatherItem title=\"HumiditÃ©\" value=\"79\" unit=\"%\"/>    \r\n            <WeatherItem title=\"Pression\" value=\"1000\" unit=\"hp\"/>  \r\n            <WeatherItem title=\"Sunrise\" value=\"06:34\"/>  \r\n            <WeatherItem title=\"Sunset\" value=\"20:43\"/>  \r\n            </View>\r\n      </View>\r\n      <View style={styles.rightAlign}>\r\n        <Text style={styles.timeZone}>France, Saint-Nazaire</Text>\r\n        <Text style={styles.latLong}>4.22N 50E</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex:1.5,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        padding: 15,\r\n    },\r\n    heading: {\r\n        fontSize: 45,\r\n        color: 'white',\r\n        marginTop: 25,\r\n        // marginLeft: 5,\r\n        fontWeight: '100',\r\n    },\r\n    subHeading: {\r\n        fontSize: 25,\r\n        color: '#eee',\r\n        fontWeight: '300',\r\n        // marginLeft: 5,\r\n    },\r\n    rightAlign: {\r\n        textAlign: 'right',\r\n        marginTop: 35,\r\n        // marginRight: 5,\r\n    },\r\n    timeZone: {\r\n        fontSize: 15,\r\n        color: 'white',\r\n    },\r\n    latLong: {\r\n        fontSize: 16,\r\n        color: 'white',\r\n        fontWeight: '700',\r\n    },\r\n    weatherItemContainer: {\r\n        backgroundColor: \"#18181b99\",\r\n        borderRadius: 10,\r\n        borderColor: \"#eee\",\r\n        borderWidth: 1,\r\n        // marginLeft: 5,\r\n        padding: 10,\r\n        marginTop: 10,\r\n    },\r\n    weatherItem: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    weatherItemTitle: {\r\n        color: 'white',\r\n        fontSize: 14,\r\n        fontWeight: '100',\r\n    },\r\n    weatherItemValue: {\r\n        color: 'white',\r\n        fontSize: 14,\r\n        fontWeight: '100',\r\n    }\r\n})\r\n\r\nexport default DateTime;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}