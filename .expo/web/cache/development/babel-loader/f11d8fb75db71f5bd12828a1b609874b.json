{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport React, { useEffect, useState } from \"react\";\nimport DateTime from \"./components/DateTime\";\nimport WeatherScroll from \"./components/WeatherScroll\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar img = require(\"./assets/imageBg.jpg\");\n\nexport default function App() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(function (success) {\n      var _success$coords = success.coords,\n          latitude = _success$coords.latitude,\n          longitude = _success$coords.longitude;\n      fetchDataFromApi(latitude, longitude);\n    });\n  }, []);\n\n  var fetchDataFromApi = function fetchDataFromApi(latitude, longitude) {\n    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + latitude + \"&lon=\" + longitude + \"&exclude=hourly,minutely&units=metric&appid=\" + API_KEY).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      console.log(data);\n      showWeatherData(data);\n    });\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(ImageBackground, {\n      source: img,\n      style: styles.imageBg,\n      children: [_jsx(DateTime, {}), _jsx(WeatherScroll, {})]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  imageBg: {\n    flex: 1,\n    resizeMode: \"cover\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"names":["StatusBar","React","useEffect","useState","DateTime","WeatherScroll","img","require","App","data","setData","navigator","geolocation","getCurrentPosition","success","coords","latitude","longitude","fetchDataFromApi","fetch","API_KEY","then","res","json","console","log","showWeatherData","styles","container","imageBg","StyleSheet","create","flex","resizeMode","justifyContent"],"sources":["C:/wamp64/www/meteo-react-native/App.jsx"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport { StyleSheet, Text, View, ImageBackground } from \"react-native\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport DateTime from \"./components/DateTime\";\r\nimport WeatherScroll from \"./components/WeatherScroll\";\r\n\r\nconst img = require('./assets/imageBg.jpg')\r\n\r\nexport default function App() {\r\n  \r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((success) => {\r\n\r\n      let { latitude, longitude } = success.coords;\r\n      fetchDataFromApi(latitude, longitude)\r\n      \r\n    })\r\n  }, [])\r\n\r\n  const fetchDataFromApi = (latitude, longitude) => {\r\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&units=metric&appid=${API_KEY}`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n\r\n      console.log(data);\r\n      showWeatherData(data);\r\n      })\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <ImageBackground source={img} style={styles.imageBg}>\r\n        <DateTime />\r\n        <WeatherScroll />\r\n      </ImageBackground>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    // backgroundColor: \"#fff\",\r\n    // alignItems: \"center\",\r\n    // justifyContent: \"center\",\r\n  },\r\n  imageBg:{\r\n    flex:1,\r\n    resizeMode:\"cover\",\r\n    justifyContent:\"center\"\r\n  }\r\n});\r\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;;;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,QAAP;AACA,OAAOC,aAAP;;;;AAEA,IAAMC,GAAG,GAAGC,OAAO,wBAAnB;;AAEA,eAAe,SAASC,GAAT,GAAe;EAE5B,gBAAwBL,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOM,IAAP;EAAA,IAAaC,OAAb;;EAEAR,SAAS,CAAC,YAAM;IACdS,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,OAAD,EAAa;MAEpD,sBAA8BA,OAAO,CAACC,MAAtC;MAAA,IAAMC,QAAN,mBAAMA,QAAN;MAAA,IAAgBC,SAAhB,mBAAgBA,SAAhB;MACAC,gBAAgB,CAACF,QAAD,EAAWC,SAAX,CAAhB;IAED,CALD;EAMD,CAPQ,EAON,EAPM,CAAT;;EASA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,QAAD,EAAWC,SAAX,EAAyB;IAChDE,KAAK,0DAAwDH,QAAxD,aAAwEC,SAAxE,oDAAgIG,OAAhI,CAAL,CACGC,IADH,CACQ,UAAAC,GAAG;MAAA,OAAIA,GAAG,CAACC,IAAJ,EAAJ;IAAA,CADX,EAEGF,IAFH,CAEQ,UAAAZ,IAAI,EAAI;MAEde,OAAO,CAACC,GAAR,CAAYhB,IAAZ;MACAiB,eAAe,CAACjB,IAAD,CAAf;IACC,CANH;EAOD,CARD;;EAUA,OACE,KAAC,IAAD;IAAM,KAAK,EAAEkB,MAAM,CAACC,SAApB;IAAA,UACE,MAAC,eAAD;MAAiB,MAAM,EAAEtB,GAAzB;MAA8B,KAAK,EAAEqB,MAAM,CAACE,OAA5C;MAAA,WACE,KAAC,QAAD,KADF,EAEE,KAAC,aAAD,KAFF;IAAA;EADF,EADF;AAQD;AAED,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;EAC/BH,SAAS,EAAE;IACTI,IAAI,EAAE;EADG,CADoB;EAO/BH,OAAO,EAAC;IACNG,IAAI,EAAC,CADC;IAENC,UAAU,EAAC,OAFL;IAGNC,cAAc,EAAC;EAHT;AAPuB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}